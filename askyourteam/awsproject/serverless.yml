# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: awsproject
# app and org for use with dashboard.serverless.com

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

custom:
  secrets: ${file(secrets.json)}
  tableName: 'usersTable-${self:provider.stage}'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  logRetentionInDays: 365

# you can overwrite defaults here
  stage: dev
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "*"
  environment:
    usersTable: ${self:custom.tableName}
    JWT_SECRET: ${self:custom.secrets.JWT_SECRET}
    AWS_ID: ${self:custom.secrets.AWS_ID}
    quizTable: quizTable-${opt:stage, self:provider.stage}
    questionTable: questionTable-${opt:stage, self:provider.stage}
    demoQuestionTable: demoQuestionTable-${opt:stage, self:provider.stage}
#  environment:
#    userTable: ${self:custom.tableName}
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  createUser:
    handler: users/create.create
    events:
      - http:
          path: users
          method: post

  getUser:
    handler: users/get.get
    events:
      - http:
          path: users/{id}
          method: get

  verifyToken:
    handler: functions/authorize.handler

  me:
    handler: functions/me.handler
    events:
          - http:
              path: me
              method: get
              cors: true
              authorizer:
                name: verifyToken
                            # this tells the lambda where to take the information from, 
                            # in our case the HTTP Authorization header
                identitySource: method.request.header.Authorization 
                resultTtlInSeconds: 3600 # cache the result for 1 hours
  login:
    handler: functions/login.handler
    events:
      - http:
          path: login
          method: post
          cors: true
  register:
    handler: functions/register.handler
    events:
      - http:
          path: register
          method: post
          cors: true
  createQuiz:
    handler: quiz/createQuiz.handler
    events:
      - http:
          path: createQuiz
          method: post
          cors: true
  publishQuiz:
    handler: quiz/publishQuiz.handler
    events:
      - http:
          path: publishQuiz
          method: post
          cors: true
  deleteQuiz:
    handler: quiz/deleteQuiz.handler
    events:
      - http:
          path: deleteQuiz
          method: delete
          cors: true
  getAllQuizByEmail:
    handler: quiz/getAllQuizByEmail.handler
    events:
      - http:
          path: getAllQuizByEmail
          method: get
          cors: true
        
  getQuizByName:
    handler: quiz/getQuizByName.handler
    events:
      - http:
          path: getQuizByName
          method: get
          cors: true

  createQuestion:
    handler: questions/createQuestion.handler
    events:
      - http:
          path: createQuestion
          method: post
          cors: true
   
  deleteQuestion:
    handler: questions/deleteQuestion.handler
    events:
      - http:
          path: deleteQuestion
          method: delete
          cors: true

  getAllQuestionswithQuizName:
    handler: questions/getAllQuestionswithQuizName.handler
    events:
      - http:
          path: getAllQuestionswithQuizName
          method: get
          cors: true

  getQuestionbyID:
    handler: questions/getQuestionbyID.handler
    events:
      - http:
          path: getQuestionbyID
          method: get
          cors: true
          
  updateQuestion:
    handler: questions/updateQuestion.handler
    events:
      - http:
          path: updateQuestion
          method: post
          cors: true

  createDemoQuestion:
    handler: demoQuestions/createDemoQuestion.handler
    events:
      - http:
          path: createDemoQuestion
          method: post
          cors: true

  deleteDemoQuestion:
    handler: demoQuestions/deleteDemoQuestion.handler
    events:
      - http:
          path: deleteDemoQuestion
          method: post
          cors: true

  updateDemographics:
    handler: quiz/updateDemographics.handler
    events:
      - http:
          path: updateDemographics
          method: post
          cors: true
  
  getAllDemographicQuestions:
    handler: demoQuestions/getAllDemographicQuestions.handler
    events:
      - http:
          path: getAllDemographicQuestions
          method: get
          cors: true

  markQuiz:
    handler: analytics/markQuiz.handler
    events:
      - http:
          path: markQuiz
          method: post
          cors: true
          
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    usersTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
<<<<<<< HEAD
        TableName: usersTable
        AttributeDefinitions:
          -
            AttributeName: "email"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "email"
            KeyType:  "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1  
#    NewResource:
=======
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType:  HASH
        TableName: ${self:custom.tableName}
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1 
    quizTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: quizName
            AttributeType: S
          -
            AttributeName: email
            AttributeType: S
        KeySchema:
          -
            AttributeName: quizName
            KeyType: HASH
          - 
            AttributeName: email
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: emailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'   
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: quizTable-${self:provider.stage}
           
    questionTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: quizName
            AttributeType: S
          -
            AttributeName: questionID
            AttributeType: S
        KeySchema:
          -
            AttributeName: quizName
            KeyType: HASH
          - 
            AttributeName: questionID
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: questionTable-${self:provider.stage}

    demoQuestionTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: questionID
            AttributeType: S
        KeySchema:
          -
            AttributeName: questionID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: demoQuestionTable-${self:provider.stage}
>>>>>>> origin/back-end
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
# This is to test git