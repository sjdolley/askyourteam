{
  "service": {
    "service": "awsproject",
    "serviceObject": {
      "name": "awsproject"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs12.x",
      "lambdaHashingVersion": "20201221",
      "logRetentionInDays": 365,
      "stage": "dev",
      "region": "us-east-1",
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": "*"
        }
      ],
      "environment": {
        "usersTable": "usersTable-dev",
        "JWT_SECRET": "garfunkal",
        "AWS_ID": "510372081928",
        "quizTable": "quizTable-dev",
        "questionTable": "questionTable-dev"
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "CreateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/awsproject-dev-createUser",
              "RetentionInDays": 365
            }
          },
          "GetUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/awsproject-dev-getUser",
              "RetentionInDays": 365
            }
          },
          "VerifyTokenLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/awsproject-dev-verifyToken",
              "RetentionInDays": 365
            }
          },
          "MeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/awsproject-dev-me",
              "RetentionInDays": 365
            }
          },
          "LoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/awsproject-dev-login",
              "RetentionInDays": 365
            }
          },
          "RegisterLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/awsproject-dev-register",
              "RetentionInDays": 365
            }
          },
          "CreateQuizLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/awsproject-dev-createQuiz",
              "RetentionInDays": 365
            }
          },
          "PublishQuizLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/awsproject-dev-publishQuiz",
              "RetentionInDays": 365
            }
          },
          "DeleteQuizLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/awsproject-dev-deleteQuiz",
              "RetentionInDays": 365
            }
          },
          "GetAllQuizByEmailLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/awsproject-dev-getAllQuizByEmail",
              "RetentionInDays": 365
            }
          },
          "GetQuizByNameLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/awsproject-dev-getQuizByName",
              "RetentionInDays": 365
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "awsproject",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/awsproject-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/awsproject-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "awsproject",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "CreateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/awsproject/dev/1623139666452-2021-06-08T08:07:46.452Z/awsproject.zip"
              },
              "Handler": "users/create.create",
              "Runtime": "nodejs12.x",
              "FunctionName": "awsproject-dev-createUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "usersTable": "usersTable-dev",
                  "JWT_SECRET": "garfunkal",
                  "AWS_ID": "510372081928",
                  "quizTable": "quizTable-dev",
                  "questionTable": "questionTable-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateUserLogGroup"
            ]
          },
          "GetUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/awsproject/dev/1623139666452-2021-06-08T08:07:46.452Z/awsproject.zip"
              },
              "Handler": "users/get.get",
              "Runtime": "nodejs12.x",
              "FunctionName": "awsproject-dev-getUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "usersTable": "usersTable-dev",
                  "JWT_SECRET": "garfunkal",
                  "AWS_ID": "510372081928",
                  "quizTable": "quizTable-dev",
                  "questionTable": "questionTable-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserLogGroup"
            ]
          },
          "VerifyTokenLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/awsproject/dev/1623139666452-2021-06-08T08:07:46.452Z/awsproject.zip"
              },
              "Handler": "functions/authorize.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "awsproject-dev-verifyToken",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "usersTable": "usersTable-dev",
                  "JWT_SECRET": "garfunkal",
                  "AWS_ID": "510372081928",
                  "quizTable": "quizTable-dev",
                  "questionTable": "questionTable-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "VerifyTokenLogGroup"
            ]
          },
          "MeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/awsproject/dev/1623139666452-2021-06-08T08:07:46.452Z/awsproject.zip"
              },
              "Handler": "functions/me.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "awsproject-dev-me",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "usersTable": "usersTable-dev",
                  "JWT_SECRET": "garfunkal",
                  "AWS_ID": "510372081928",
                  "quizTable": "quizTable-dev",
                  "questionTable": "questionTable-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "MeLogGroup"
            ]
          },
          "LoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/awsproject/dev/1623139666452-2021-06-08T08:07:46.452Z/awsproject.zip"
              },
              "Handler": "functions/login.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "awsproject-dev-login",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "usersTable": "usersTable-dev",
                  "JWT_SECRET": "garfunkal",
                  "AWS_ID": "510372081928",
                  "quizTable": "quizTable-dev",
                  "questionTable": "questionTable-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoginLogGroup"
            ]
          },
          "RegisterLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
<<<<<<< HEAD
                "S3Key": "serverless/awsproject/dev/1623139666452-2021-06-08T08:07:46.452Z/awsproject.zip"
=======
                "S3Key": "serverless/awsproject/dev/1623102083214-2021-06-07T21:41:23.214Z/awsproject.zip"
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
              },
              "Handler": "functions/register.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "awsproject-dev-register",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "usersTable": "usersTable-dev",
                  "JWT_SECRET": "garfunkal",
                  "AWS_ID": "510372081928",
                  "quizTable": "quizTable-dev",
                  "questionTable": "questionTable-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RegisterLogGroup"
            ]
          },
          "CreateQuizLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
<<<<<<< HEAD
                "S3Key": "serverless/awsproject/dev/1623139666452-2021-06-08T08:07:46.452Z/awsproject.zip"
=======
                "S3Key": "serverless/awsproject/dev/1623102083214-2021-06-07T21:41:23.214Z/awsproject.zip"
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
              },
              "Handler": "quiz/createQuiz.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "awsproject-dev-createQuiz",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "usersTable": "usersTable-dev",
                  "JWT_SECRET": "garfunkal",
                  "AWS_ID": "510372081928",
                  "quizTable": "quizTable-dev",
                  "questionTable": "questionTable-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateQuizLogGroup"
            ]
          },
          "PublishQuizLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
<<<<<<< HEAD
                "S3Key": "serverless/awsproject/dev/1623139666452-2021-06-08T08:07:46.452Z/awsproject.zip"
=======
                "S3Key": "serverless/awsproject/dev/1623102083214-2021-06-07T21:41:23.214Z/awsproject.zip"
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
              },
              "Handler": "quiz/publishQuiz.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "awsproject-dev-publishQuiz",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "usersTable": "usersTable-dev",
                  "JWT_SECRET": "garfunkal",
                  "AWS_ID": "510372081928",
                  "quizTable": "quizTable-dev",
                  "questionTable": "questionTable-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PublishQuizLogGroup"
            ]
          },
          "DeleteQuizLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
<<<<<<< HEAD
                "S3Key": "serverless/awsproject/dev/1623139666452-2021-06-08T08:07:46.452Z/awsproject.zip"
=======
                "S3Key": "serverless/awsproject/dev/1623102083214-2021-06-07T21:41:23.214Z/awsproject.zip"
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
              },
              "Handler": "quiz/deleteQuiz.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "awsproject-dev-deleteQuiz",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "usersTable": "usersTable-dev",
                  "JWT_SECRET": "garfunkal",
                  "AWS_ID": "510372081928",
                  "quizTable": "quizTable-dev",
                  "questionTable": "questionTable-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteQuizLogGroup"
            ]
          },
          "GetAllQuizByEmailLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
<<<<<<< HEAD
                "S3Key": "serverless/awsproject/dev/1623139666452-2021-06-08T08:07:46.452Z/awsproject.zip"
=======
                "S3Key": "serverless/awsproject/dev/1623102083214-2021-06-07T21:41:23.214Z/awsproject.zip"
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
              },
              "Handler": "quiz/getAllQuizByEmail.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "awsproject-dev-getAllQuizByEmail",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "usersTable": "usersTable-dev",
                  "JWT_SECRET": "garfunkal",
                  "AWS_ID": "510372081928",
                  "quizTable": "quizTable-dev",
                  "questionTable": "questionTable-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllQuizByEmailLogGroup"
            ]
          },
          "GetQuizByNameLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
<<<<<<< HEAD
                "S3Key": "serverless/awsproject/dev/1623139666452-2021-06-08T08:07:46.452Z/awsproject.zip"
=======
                "S3Key": "serverless/awsproject/dev/1623102083214-2021-06-07T21:41:23.214Z/awsproject.zip"
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
              },
              "Handler": "quiz/getQuizByName.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "awsproject-dev-getQuizByName",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "usersTable": "usersTable-dev",
                  "JWT_SECRET": "garfunkal",
                  "AWS_ID": "510372081928",
                  "quizTable": "quizTable-dev",
                  "questionTable": "questionTable-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetQuizByNameLogGroup"
            ]
          },
<<<<<<< HEAD
          "CreateUserLambdaVersion5gLU8easAvUZMto7RBsKB55gFcDIRSxM5PpUpLYxc": {
=======
          "CreateUserLambdaVersionr58ruveMlLOd6nuoN55hqzy8ss4BjSgPwqLUsOondxE": {
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateUserLambdaFunction"
              },
<<<<<<< HEAD
              "CodeSha256": "yykO+bC6oIyFeSA2mEfylGfEJsIiipV9t/ebCA26hZc="
            }
          },
          "GetUserLambdaVersionoJeiv3BKF40cj1fUtsc9g1SF3Xdi8c1wjpAP6js": {
=======
              "CodeSha256": "RuOiqriMPYMaHpgS9bAgyXhBB3/EwqAe4pZqqa++9H8="
            }
          },
          "GetUserLambdaVersionBsNoWt9tlY1zUFhQrOXrNquzyctrdBL6ikYFTNUWw": {
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserLambdaFunction"
              },
<<<<<<< HEAD
              "CodeSha256": "yykO+bC6oIyFeSA2mEfylGfEJsIiipV9t/ebCA26hZc="
            }
          },
          "VerifyTokenLambdaVersionVd0S8BI4HSaDJVdeQckoM6ZCjlC9mfQTkWn8K0sXQ": {
=======
              "CodeSha256": "RuOiqriMPYMaHpgS9bAgyXhBB3/EwqAe4pZqqa++9H8="
            }
          },
          "VerifyTokenLambdaVersionqe2MDnUwWaQUF0jtRtGlclKm0UgrE8i1uR1IcXwT548": {
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "VerifyTokenLambdaFunction"
              },
<<<<<<< HEAD
              "CodeSha256": "yykO+bC6oIyFeSA2mEfylGfEJsIiipV9t/ebCA26hZc="
            }
          },
          "MeLambdaVersionAcwHTiFbFvXNpKaXPEM8oZMkKeNSre5QbHxn3Xg0": {
=======
              "CodeSha256": "RuOiqriMPYMaHpgS9bAgyXhBB3/EwqAe4pZqqa++9H8="
            }
          },
          "MeLambdaVersion7WXAZ8EBZOfajtxYbOnh0Qwv2anZZ8GOLSHs7aXqE": {
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MeLambdaFunction"
              },
<<<<<<< HEAD
              "CodeSha256": "yykO+bC6oIyFeSA2mEfylGfEJsIiipV9t/ebCA26hZc="
            }
          },
          "LoginLambdaVersionAHMbV3UVOuEf0eHbNy3NcIyMnrDjPLuR1W9OayIk": {
=======
              "CodeSha256": "RuOiqriMPYMaHpgS9bAgyXhBB3/EwqAe4pZqqa++9H8="
            }
          },
          "LoginLambdaVersioniHATMxwhDNHixJmZtAMYqnfrxL21mfFHA2biVcITVA": {
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginLambdaFunction"
              },
<<<<<<< HEAD
              "CodeSha256": "yykO+bC6oIyFeSA2mEfylGfEJsIiipV9t/ebCA26hZc="
            }
          },
          "RegisterLambdaVersionoKznO1lhFMM19IhE9YHVnBoG28Dw9V9ZVfma6NzME": {
=======
              "CodeSha256": "RuOiqriMPYMaHpgS9bAgyXhBB3/EwqAe4pZqqa++9H8="
            }
          },
          "RegisterLambdaVersionFvLopshWxN2vHkmxWxg3LxgBTXAIogkMH3wl43ow": {
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RegisterLambdaFunction"
              },
<<<<<<< HEAD
              "CodeSha256": "yykO+bC6oIyFeSA2mEfylGfEJsIiipV9t/ebCA26hZc="
            }
          },
          "CreateQuizLambdaVersionOaUMeRiYK3wnRmxcTOAhoFkM3ffPQePes4OagZEugmI": {
=======
              "CodeSha256": "RuOiqriMPYMaHpgS9bAgyXhBB3/EwqAe4pZqqa++9H8="
            }
          },
          "CreateQuizLambdaVersion5jqjS3ilvnBePydXTmOqg78hDIAPfT532DDdcIqLy1M": {
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateQuizLambdaFunction"
              },
<<<<<<< HEAD
              "CodeSha256": "yykO+bC6oIyFeSA2mEfylGfEJsIiipV9t/ebCA26hZc="
            }
          },
          "PublishQuizLambdaVersion3buj6yoe5H6Xpum8FBpedUoBAsnt9CZmBpBvikw": {
=======
              "CodeSha256": "RuOiqriMPYMaHpgS9bAgyXhBB3/EwqAe4pZqqa++9H8="
            }
          },
          "PublishQuizLambdaVersionKto9D7a8cdej1GA2btlvDINth6IPVrt4Hphdtb6no": {
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PublishQuizLambdaFunction"
              },
<<<<<<< HEAD
              "CodeSha256": "yykO+bC6oIyFeSA2mEfylGfEJsIiipV9t/ebCA26hZc="
            }
          },
          "DeleteQuizLambdaVersion0VWu8Wpng2yfst788RHUMxYYm2kwLNK37defnJKbL0o": {
=======
              "CodeSha256": "RuOiqriMPYMaHpgS9bAgyXhBB3/EwqAe4pZqqa++9H8="
            }
          },
          "DeleteQuizLambdaVersionBUJumV4Y8YfDMhQ5aYdfcf0kuM1ei7ExlznD8LwMg": {
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteQuizLambdaFunction"
              },
<<<<<<< HEAD
              "CodeSha256": "yykO+bC6oIyFeSA2mEfylGfEJsIiipV9t/ebCA26hZc="
            }
          },
          "GetAllQuizByEmailLambdaVersionwUjveTWFpdAJ16y2PUxArIT6EvH3vLnSPcNPmAOlFPU": {
=======
              "CodeSha256": "RuOiqriMPYMaHpgS9bAgyXhBB3/EwqAe4pZqqa++9H8="
            }
          },
          "GetAllQuizByEmailLambdaVersionOsBPtDHeHEEVvJ5gbAmL6i4sTuuYiHLygUjloq0": {
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllQuizByEmailLambdaFunction"
              },
<<<<<<< HEAD
              "CodeSha256": "yykO+bC6oIyFeSA2mEfylGfEJsIiipV9t/ebCA26hZc="
            }
          },
          "GetQuizByNameLambdaVersionF8iHHub9F8mNEFLNPgRpVAxBlMJ2GHaVGKI1hwZh8c": {
=======
              "CodeSha256": "RuOiqriMPYMaHpgS9bAgyXhBB3/EwqAe4pZqqa++9H8="
            }
          },
          "GetQuizByNameLambdaVersionrgGodRjrY3slj7pTRGZCfS8YPcJ1FzawzNbn9gNTQ": {
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetQuizByNameLambdaFunction"
              },
<<<<<<< HEAD
              "CodeSha256": "yykO+bC6oIyFeSA2mEfylGfEJsIiipV9t/ebCA26hZc="
=======
              "CodeSha256": "RuOiqriMPYMaHpgS9bAgyXhBB3/EwqAe4pZqqa++9H8="
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-awsproject",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceUsers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "users",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUsersIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMe": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "me",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceLogin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "login",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceRegister": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "register",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCreatequiz": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "createQuiz",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePublishquiz": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "publishQuiz",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeletequiz": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "deleteQuiz",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetallquizbyemail": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "getAllQuizByEmail",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
<<<<<<< HEAD
          "ApiGatewayResourceGetallquizbyemailEmailVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceGetallquizbyemail"
              },
              "PathPart": "{email}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
=======
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
          "ApiGatewayResourceGetquizbyname": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "getQuizByName",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodMeOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceMe"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodLoginOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodCreatequizOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCreatequiz"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPublishquizOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePublishquiz"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDeletequizOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceDeletequiz"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
<<<<<<< HEAD
          "ApiGatewayMethodGetallquizbyemailEmailVarOptions": {
=======
          "ApiGatewayMethodGetallquizbyemailOptions": {
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
<<<<<<< HEAD
                "Ref": "ApiGatewayResourceGetallquizbyemailEmailVar"
=======
                "Ref": "ApiGatewayResourceGetallquizbyemail"
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGetquizbynameOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetquizbyname"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUsersPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodUsersIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodMeGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMe"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "VerifyTokenApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "VerifyTokenApiGatewayAuthorizer"
          },
          "ApiGatewayMethodLoginPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LoginLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodRegisterPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRegister"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RegisterLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodCreatequizPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
<<<<<<< HEAD
=======
                "Ref": "ApiGatewayResourceMe"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "VerifyTokenApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "VerifyTokenApiGatewayAuthorizer"
          },
          "ApiGatewayMethodLoginPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LoginLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodRegisterPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRegister"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RegisterLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodCreatequizPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
                "Ref": "ApiGatewayResourceCreatequiz"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateQuizLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPublishquizPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePublishquiz"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "PublishQuizLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodDeletequizDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDeletequiz"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteQuizLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
<<<<<<< HEAD
          "ApiGatewayMethodGetallquizbyemailEmailVarGet": {
=======
          "ApiGatewayMethodGetallquizbyemailGet": {
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
<<<<<<< HEAD
                "Ref": "ApiGatewayResourceGetallquizbyemailEmailVar"
=======
                "Ref": "ApiGatewayResourceGetallquizbyemail"
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllQuizByEmailLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodGetquizbynameGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetquizbyname"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetQuizByNameLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "VerifyTokenApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "AuthorizerResultTtlInSeconds": 3600,
              "IdentitySource": "method.request.header.Authorization",
              "Name": "verifyToken",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "AuthorizerUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "VerifyTokenLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              },
              "Type": "TOKEN"
            }
          },
<<<<<<< HEAD
          "ApiGatewayDeployment1623139664542": {
=======
          "ApiGatewayDeployment1623102080643": {
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodMeOptions",
              "ApiGatewayMethodLoginOptions",
              "ApiGatewayMethodCreatequizOptions",
              "ApiGatewayMethodPublishquizOptions",
              "ApiGatewayMethodDeletequizOptions",
<<<<<<< HEAD
              "ApiGatewayMethodGetallquizbyemailEmailVarOptions",
=======
              "ApiGatewayMethodGetallquizbyemailOptions",
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
              "ApiGatewayMethodGetquizbynameOptions",
              "ApiGatewayMethodUsersPost",
              "ApiGatewayMethodUsersIdVarGet",
              "ApiGatewayMethodMeGet",
              "ApiGatewayMethodLoginPost",
              "ApiGatewayMethodRegisterPost",
              "ApiGatewayMethodCreatequizPost",
              "ApiGatewayMethodPublishquizPost",
              "ApiGatewayMethodDeletequizDelete",
<<<<<<< HEAD
              "ApiGatewayMethodGetallquizbyemailEmailVarGet",
=======
              "ApiGatewayMethodGetallquizbyemailGet",
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
              "ApiGatewayMethodGetquizbynameGet"
            ]
          },
          "CreateUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "MeLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "MeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "VerifyTokenLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "VerifyTokenLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "LoginLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RegisterLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RegisterLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateQuizLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateQuizLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PublishQuizLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PublishQuizLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteQuizLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteQuizLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAllQuizByEmailLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllQuizByEmailLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetQuizByNameLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetQuizByNameLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "usersTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "email",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "email",
                  "KeyType": "HASH"
                }
              ],
              "TableName": "usersTable-dev",
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          },
          "quizTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "quizName",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "email",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "quizName",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "email",
                  "KeyType": "RANGE"
                }
              ],
              "TableName": "quizTable-dev",
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          },
          "questionTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "questionName",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "quizName",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "questionName",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "quizName",
                  "KeyType": "RANGE"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "questionTable-dev"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "CreateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
<<<<<<< HEAD
              "Ref": "CreateUserLambdaVersion5gLU8easAvUZMto7RBsKB55gFcDIRSxM5PpUpLYxc"
            },
            "Export": {
              "Name": "sls-awsproject-dev-CreateUserLambdaFunctionQualifiedArn"
=======
              "Ref": "CreateUserLambdaVersionr58ruveMlLOd6nuoN55hqzy8ss4BjSgPwqLUsOondxE"
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
            }
          },
          "GetUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
<<<<<<< HEAD
              "Ref": "GetUserLambdaVersionoJeiv3BKF40cj1fUtsc9g1SF3Xdi8c1wjpAP6js"
            },
            "Export": {
              "Name": "sls-awsproject-dev-GetUserLambdaFunctionQualifiedArn"
=======
              "Ref": "GetUserLambdaVersionBsNoWt9tlY1zUFhQrOXrNquzyctrdBL6ikYFTNUWw"
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
            }
          },
          "VerifyTokenLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
<<<<<<< HEAD
              "Ref": "VerifyTokenLambdaVersionVd0S8BI4HSaDJVdeQckoM6ZCjlC9mfQTkWn8K0sXQ"
            },
            "Export": {
              "Name": "sls-awsproject-dev-VerifyTokenLambdaFunctionQualifiedArn"
=======
              "Ref": "VerifyTokenLambdaVersionqe2MDnUwWaQUF0jtRtGlclKm0UgrE8i1uR1IcXwT548"
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
            }
          },
          "MeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
<<<<<<< HEAD
              "Ref": "MeLambdaVersionAcwHTiFbFvXNpKaXPEM8oZMkKeNSre5QbHxn3Xg0"
            },
            "Export": {
              "Name": "sls-awsproject-dev-MeLambdaFunctionQualifiedArn"
=======
              "Ref": "MeLambdaVersion7WXAZ8EBZOfajtxYbOnh0Qwv2anZZ8GOLSHs7aXqE"
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
            }
          },
          "LoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
<<<<<<< HEAD
              "Ref": "LoginLambdaVersionAHMbV3UVOuEf0eHbNy3NcIyMnrDjPLuR1W9OayIk"
            },
            "Export": {
              "Name": "sls-awsproject-dev-LoginLambdaFunctionQualifiedArn"
=======
              "Ref": "LoginLambdaVersioniHATMxwhDNHixJmZtAMYqnfrxL21mfFHA2biVcITVA"
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
            }
          },
          "RegisterLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
<<<<<<< HEAD
              "Ref": "RegisterLambdaVersionoKznO1lhFMM19IhE9YHVnBoG28Dw9V9ZVfma6NzME"
            },
            "Export": {
              "Name": "sls-awsproject-dev-RegisterLambdaFunctionQualifiedArn"
=======
              "Ref": "RegisterLambdaVersionFvLopshWxN2vHkmxWxg3LxgBTXAIogkMH3wl43ow"
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
            }
          },
          "CreateQuizLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
<<<<<<< HEAD
              "Ref": "CreateQuizLambdaVersionOaUMeRiYK3wnRmxcTOAhoFkM3ffPQePes4OagZEugmI"
            },
            "Export": {
              "Name": "sls-awsproject-dev-CreateQuizLambdaFunctionQualifiedArn"
=======
              "Ref": "CreateQuizLambdaVersion5jqjS3ilvnBePydXTmOqg78hDIAPfT532DDdcIqLy1M"
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
            }
          },
          "PublishQuizLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
<<<<<<< HEAD
              "Ref": "PublishQuizLambdaVersion3buj6yoe5H6Xpum8FBpedUoBAsnt9CZmBpBvikw"
            },
            "Export": {
              "Name": "sls-awsproject-dev-PublishQuizLambdaFunctionQualifiedArn"
=======
              "Ref": "PublishQuizLambdaVersionKto9D7a8cdej1GA2btlvDINth6IPVrt4Hphdtb6no"
            }
          },
          "DeleteQuizLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteQuizLambdaVersionBUJumV4Y8YfDMhQ5aYdfcf0kuM1ei7ExlznD8LwMg"
            }
          },
          "GetAllQuizByEmailLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllQuizByEmailLambdaVersionOsBPtDHeHEEVvJ5gbAmL6i4sTuuYiHLygUjloq0"
            }
          },
          "GetQuizByNameLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetQuizByNameLambdaVersionrgGodRjrY3slj7pTRGZCfS8YPcJ1FzawzNbn9gNTQ"
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
            }
          },
          "DeleteQuizLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteQuizLambdaVersion0VWu8Wpng2yfst788RHUMxYYm2kwLNK37defnJKbL0o"
            },
            "Export": {
              "Name": "sls-awsproject-dev-DeleteQuizLambdaFunctionQualifiedArn"
            }
          },
          "GetAllQuizByEmailLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllQuizByEmailLambdaVersionwUjveTWFpdAJ16y2PUxArIT6EvH3vLnSPcNPmAOlFPU"
            },
            "Export": {
              "Name": "sls-awsproject-dev-GetAllQuizByEmailLambdaFunctionQualifiedArn"
            }
          },
          "GetQuizByNameLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetQuizByNameLambdaVersionF8iHHub9F8mNEFLNPgRpVAxBlMJ2GHaVGKI1hwZh8c"
            },
            "Export": {
              "Name": "sls-awsproject-dev-GetQuizByNameLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "secrets": {
        "JWT_SECRET": "garfunkal",
        "AWS_ID": "510372081928"
      },
      "tableName": "usersTable-dev"
    },
    "pluginsData": {},
    "functions": {
      "createUser": {
        "handler": "users/create.create",
        "events": [
          {
            "http": {
              "path": "users",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "awsproject-dev-createUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
<<<<<<< HEAD
        "versionLogicalId": "CreateUserLambdaVersion5gLU8easAvUZMto7RBsKB55gFcDIRSxM5PpUpLYxc"
=======
        "versionLogicalId": "CreateUserLambdaVersionr58ruveMlLOd6nuoN55hqzy8ss4BjSgPwqLUsOondxE"
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
      },
      "getUser": {
        "handler": "users/get.get",
        "events": [
          {
            "http": {
              "path": "users/{id}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "awsproject-dev-getUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
<<<<<<< HEAD
        "versionLogicalId": "GetUserLambdaVersionoJeiv3BKF40cj1fUtsc9g1SF3Xdi8c1wjpAP6js"
=======
        "versionLogicalId": "GetUserLambdaVersionBsNoWt9tlY1zUFhQrOXrNquzyctrdBL6ikYFTNUWw"
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
      },
      "verifyToken": {
        "handler": "functions/authorize.handler",
        "events": [],
        "name": "awsproject-dev-verifyToken",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
<<<<<<< HEAD
        "versionLogicalId": "VerifyTokenLambdaVersionVd0S8BI4HSaDJVdeQckoM6ZCjlC9mfQTkWn8K0sXQ"
=======
        "versionLogicalId": "VerifyTokenLambdaVersionqe2MDnUwWaQUF0jtRtGlclKm0UgrE8i1uR1IcXwT548"
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
      },
      "me": {
        "handler": "functions/me.handler",
        "events": [
          {
            "http": {
              "path": "me",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "verifyToken",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"VerifyTokenLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 3600,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "awsproject-dev-me",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
<<<<<<< HEAD
        "versionLogicalId": "MeLambdaVersionAcwHTiFbFvXNpKaXPEM8oZMkKeNSre5QbHxn3Xg0"
=======
        "versionLogicalId": "MeLambdaVersion7WXAZ8EBZOfajtxYbOnh0Qwv2anZZ8GOLSHs7aXqE"
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
      },
      "login": {
        "handler": "functions/login.handler",
        "events": [
          {
            "http": {
              "path": "login",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "awsproject-dev-login",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
<<<<<<< HEAD
        "versionLogicalId": "LoginLambdaVersionAHMbV3UVOuEf0eHbNy3NcIyMnrDjPLuR1W9OayIk"
=======
        "versionLogicalId": "LoginLambdaVersioniHATMxwhDNHixJmZtAMYqnfrxL21mfFHA2biVcITVA"
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
      },
      "register": {
        "handler": "functions/register.handler",
        "events": [
          {
            "http": {
              "path": "register",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "awsproject-dev-register",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
<<<<<<< HEAD
        "versionLogicalId": "RegisterLambdaVersionoKznO1lhFMM19IhE9YHVnBoG28Dw9V9ZVfma6NzME"
=======
        "versionLogicalId": "RegisterLambdaVersionFvLopshWxN2vHkmxWxg3LxgBTXAIogkMH3wl43ow"
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
      },
      "createQuiz": {
        "handler": "quiz/createQuiz.handler",
        "events": [
          {
            "http": {
              "path": "createQuiz",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "awsproject-dev-createQuiz",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
<<<<<<< HEAD
        "versionLogicalId": "CreateQuizLambdaVersionOaUMeRiYK3wnRmxcTOAhoFkM3ffPQePes4OagZEugmI"
=======
        "versionLogicalId": "CreateQuizLambdaVersion5jqjS3ilvnBePydXTmOqg78hDIAPfT532DDdcIqLy1M"
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
      },
      "publishQuiz": {
        "handler": "quiz/publishQuiz.handler",
        "events": [
          {
            "http": {
              "path": "publishQuiz",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "awsproject-dev-publishQuiz",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
<<<<<<< HEAD
        "versionLogicalId": "PublishQuizLambdaVersion3buj6yoe5H6Xpum8FBpedUoBAsnt9CZmBpBvikw"
=======
        "versionLogicalId": "PublishQuizLambdaVersionKto9D7a8cdej1GA2btlvDINth6IPVrt4Hphdtb6no"
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
      },
      "deleteQuiz": {
        "handler": "quiz/deleteQuiz.handler",
        "events": [
          {
            "http": {
              "path": "deleteQuiz",
              "method": "delete",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "awsproject-dev-deleteQuiz",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
<<<<<<< HEAD
        "versionLogicalId": "DeleteQuizLambdaVersion0VWu8Wpng2yfst788RHUMxYYm2kwLNK37defnJKbL0o"
=======
        "versionLogicalId": "DeleteQuizLambdaVersionBUJumV4Y8YfDMhQ5aYdfcf0kuM1ei7ExlznD8LwMg"
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
      },
      "getAllQuizByEmail": {
        "handler": "quiz/getAllQuizByEmail.handler",
        "events": [
          {
            "http": {
<<<<<<< HEAD
              "path": "getAllQuizByEmail/{email}",
=======
              "path": "getAllQuizByEmail",
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "awsproject-dev-getAllQuizByEmail",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
<<<<<<< HEAD
        "versionLogicalId": "GetAllQuizByEmailLambdaVersionwUjveTWFpdAJ16y2PUxArIT6EvH3vLnSPcNPmAOlFPU"
=======
        "versionLogicalId": "GetAllQuizByEmailLambdaVersionOsBPtDHeHEEVvJ5gbAmL6i4sTuuYiHLygUjloq0"
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
      },
      "getQuizByName": {
        "handler": "quiz/getQuizByName.handler",
        "events": [
          {
            "http": {
              "path": "getQuizByName",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "awsproject-dev-getQuizByName",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
<<<<<<< HEAD
        "versionLogicalId": "GetQuizByNameLambdaVersionF8iHHub9F8mNEFLNPgRpVAxBlMJ2GHaVGKI1hwZh8c"
=======
        "versionLogicalId": "GetQuizByNameLambdaVersionrgGodRjrY3slj7pTRGZCfS8YPcJ1FzawzNbn9gNTQ"
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
      }
    },
    "resources": {
      "Resources": {
        "usersTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "email",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "email",
                "KeyType": "HASH"
              }
            ],
            "TableName": "usersTable-dev",
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        },
        "quizTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "quizName",
                "AttributeType": "S"
              },
              {
                "AttributeName": "email",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "quizName",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "email",
                "KeyType": "RANGE"
              }
            ],
            "TableName": "quizTable-dev",
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        },
        "questionTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "questionName",
                "AttributeType": "S"
              },
              {
                "AttributeName": "quizName",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "questionName",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "quizName",
                "KeyType": "RANGE"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "questionTable-dev"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "layers": {},
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "frameworkVersion": "2",
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "isDashboardMonitoringPreconfigured": false,
<<<<<<< HEAD
    "artifact": "C:\\Users\\Simeon\\Askyourteam\\askyourteam-1\\awsproject\\.serverless\\awsproject.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/awsproject/dev/1623139666452-2021-06-08T08:07:46.452Z",
=======
    "artifact": "C:\\Users\\garfu\\askyourteam\\askyourteam\\awsproject\\.serverless\\awsproject.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/awsproject/dev/1623102083214-2021-06-07T21:41:23.214Z",
>>>>>>> f0e2d46f3ff460100a297d773ee69e7d20a5f76c
    "artifact": "awsproject.zip"
  }
}